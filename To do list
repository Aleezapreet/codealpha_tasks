#include <iostream>
#include <vector>
#include<string>

// Define a structure for a Task
struct Task {
    std::string description;
    bool isCompleted;

    Task(std::string desc) : description(desc), isCompleted(false) {}
};

// Display menu options
void displayMenu() {
    std::cout << "\n=== To-Do List Application ===\n";
    std::cout << "1. Add a task\n";
    std::cout << "2. Mark a task as completed\n";
    std::cout << "3. View tasks\n";
    std::cout << "4. Exit\n";
    std::cout << "Choose an option: ";
}

// Add a new task
void addTask(std::vector<Task>& tasks) {
    std::cout << "\nEnter task description: ";
    std::string description;
    std::cin.ignore();
    std::getline(std::cin, description);
    tasks.emplace_back(description);
    std::cout << "Task added successfully!\n";
}

// Mark a task as completed
void markTaskAsCompleted(std::vector<Task>& tasks) {
    if (tasks.empty()) {
        std::cout << "\nNo tasks available to mark as completed!\n";
        return;
    }

    std::cout << "\nEnter task number to mark as completed: ";
    int taskNumber;
    std::cin >> taskNumber;

    if (taskNumber > 0 && taskNumber <= tasks.size()) {
        tasks[taskNumber - 1].isCompleted = true;
        std::cout << "Task marked as completed!\n";
    } else {
        std::cout << "Invalid task number!\n";
    }
}

// View all tasks
void viewTasks(const std::vector<Task>& tasks) {
    if (tasks.empty()) {
        std::cout << "\nNo tasks available!\n";
        return;
    }

    std::cout << "\n=== Current Tasks ===\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        std::cout << i + 1 << ". " << tasks[i].description
                  << (tasks[i].isCompleted ? " [Completed]" : " [Incomplete]") << "\n";
    }
}

int main() {
    std::vector<Task> tasks;
    int choice;

    do {
        displayMenu();
        std::cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                markTaskAsCompleted(tasks);
                break;
            case 3:
                viewTasks(tasks);
                break;
            case 4:
                std::cout << "Exiting the application. Goodbye!\n";
                break;
            default:
                std::cout << "Invalid option! Please try again.\n";
        }
    } while (choice != 4);

    return 0;
}

